PREFIX : <https://eyereasoner.github.io/lingua/etc/steps.trig#>
PREFIX lingua: <http://www.w3.org/2000/10/swap/lingua#>
PREFIX log: <http://www.w3.org/2000/10/swap/log#>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX list: <http://www.w3.org/2000/10/swap/list#>
PREFIX vcard: <http://www.w3.org/2006/vcard/ns#>

:model :is (_:bng_1 _:bng_2).
:model :is (_:bng_1 _:bng_3 _:bng_2).

#
# lingua explanation
#

_:bng_4 lingua:explanation _:bng_5.
_:bng_6 lingua:explanation _:bng_7.
_:bng_8 lingua:explanation _:bng_9.
_:bng_9 lingua:explanation _:bng_10.
_:bng_4 lingua:explanation _:bng_11.
_:bng_12 lingua:explanation _:bng_13.
_:bng_14 lingua:explanation _:bng_15.
_:bng_16 lingua:explanation _:bng_17.
_:bng_17 lingua:explanation _:bng_18.

GRAPH _:bng_19 {
    :Pat a vcard:Individual.
    :Pat :canDo :E.
}

GRAPH _:bng_20 {
    _:bng_24 log:sequent (_:bng_1 _:bng_25).
}

GRAPH _:bng_21 {
    _:bng_22 log:sequent (_:bng_2 _:bng_3).
}

GRAPH _:bng_1 {
    :Pat :canDo :A.
}

GRAPH _:bng_2 {
    :Pat :canDo :E.
}

GRAPH _:bng_27 {
    _:bng_28 log:sequent (_:bng_2 _:bng_29).
}

GRAPH _:bng_3 {
    :Pat :canDo :D.
}

GRAPH _:bng_4 {
    _:bng_19 log:call true.
    [] rdf:value true; log:callWithCut true.
}

GRAPH _:bng_5 {
    _:bng_19 :findModel ((_:bng_20 _:bng_21) (_:bng_1 _:bng_2) (_:bng_1 _:bng_2)).
}

GRAPH _:bng_6 {
    _:bng_22 log:sequent (_:bng_2 _:bng_3).
    (_:bng_2 _:bng_3) list:member _:bng_2.
    _:bng_22 log:call true.
    (_:bng_20) list:notMember _:bng_21.
    ((_:bng_20) (_:bng_21)) list:append (_:bng_20 _:bng_21).
    ((_:bng_1) (_:bng_2)) list:append (_:bng_1 _:bng_2).
    [] rdf:value true; log:becomes _:bng_2.
    _:bng_5 log:callWithCleanup _:bng_23.
}

GRAPH _:bng_7 {
    _:bng_19 :findModel ((_:bng_20) (_:bng_1) (_:bng_1 _:bng_2)).
}

GRAPH _:bng_8 {
    _:bng_24 log:sequent (_:bng_1 _:bng_25).
    (_:bng_1 _:bng_25) list:member _:bng_1.
    _:bng_24 log:call true.
    () list:notMember _:bng_20.
    (() (_:bng_20)) list:append (_:bng_20).
    (() (_:bng_1)) list:append (_:bng_1).
    [] rdf:value true; log:becomes _:bng_1.
    _:bng_7 log:callWithCleanup _:bng_26.
}

GRAPH _:bng_9 {
    _:bng_19 :findModel (() () (_:bng_1 _:bng_2)).
}

GRAPH _:bng_10 {
    :model :is (_:bng_1 _:bng_2).
}

GRAPH _:bng_11 {
    _:bng_19 :findModel ((_:bng_20 _:bng_21 _:bng_27) (_:bng_1 _:bng_3 _:bng_2) (_:bng_1 _:bng_3 _:bng_2)).
}

GRAPH _:bng_12 {
    _:bng_28 log:sequent (_:bng_2 _:bng_29).
    (_:bng_2 _:bng_29) list:member _:bng_2.
    _:bng_28 log:call true.
    (_:bng_20 _:bng_21) list:notMember _:bng_27.
    ((_:bng_20 _:bng_21) (_:bng_27)) list:append (_:bng_20 _:bng_21 _:bng_27).
    ((_:bng_1 _:bng_3) (_:bng_2)) list:append (_:bng_1 _:bng_3 _:bng_2).
    [] rdf:value true; log:becomes _:bng_2.
    _:bng_11 log:callWithCleanup _:bng_23.
}

GRAPH _:bng_13 {
    _:bng_19 :findModel ((_:bng_20 _:bng_21) (_:bng_1 _:bng_3) (_:bng_1 _:bng_3 _:bng_2)).
}

GRAPH _:bng_14 {
    _:bng_22 log:sequent (_:bng_2 _:bng_3).
    (_:bng_2 _:bng_3) list:member _:bng_3.
    _:bng_22 log:call true.
    (_:bng_20) list:notMember _:bng_21.
    ((_:bng_20) (_:bng_21)) list:append (_:bng_20 _:bng_21).
    ((_:bng_1) (_:bng_3)) list:append (_:bng_1 _:bng_3).
    [] rdf:value true; log:becomes _:bng_3.
    _:bng_13 log:callWithCleanup _:bng_30.
}

GRAPH _:bng_15 {
    _:bng_19 :findModel ((_:bng_20) (_:bng_1) (_:bng_1 _:bng_3 _:bng_2)).
}

GRAPH _:bng_16 {
    _:bng_24 log:sequent (_:bng_1 _:bng_25).
    (_:bng_1 _:bng_25) list:member _:bng_1.
    _:bng_24 log:call true.
    () list:notMember _:bng_20.
    (() (_:bng_20)) list:append (_:bng_20).
    (() (_:bng_1)) list:append (_:bng_1).
    [] rdf:value true; log:becomes _:bng_1.
    _:bng_15 log:callWithCleanup _:bng_26.
}

GRAPH _:bng_17 {
    _:bng_19 :findModel (() () (_:bng_1 _:bng_3 _:bng_2)).
}

GRAPH _:bng_18 {
    :model :is (_:bng_1 _:bng_3 _:bng_2).
}

GRAPH _:bng_24 {
    :Pat a vcard:Individual.
}

GRAPH _:bng_25 {
    :Pat :canDo :B.
}

GRAPH _:bng_22 {
    :Pat a vcard:Individual.
    :Pat :canDo :A.
}

GRAPH _:bng_28 {
    :Pat a vcard:Individual.
    :Pat :canDo :D.
}

GRAPH _:bng_2 {
    :Pat :canDo :E.
}

GRAPH _:bng_29 {
    :Pat :canDo :F.
}

GRAPH _:bng_19 {
    :Pat a vcard:Individual.
    :Pat :canDo :E.
}

GRAPH _:bng_20 {
    _:bng_24 log:sequent (_:bng_1 _:bng_25).
}

GRAPH _:bng_21 {
    _:bng_22 log:sequent (_:bng_2 _:bng_3).
}

GRAPH _:bng_1 {
    :Pat :canDo :A.
}

GRAPH _:bng_3 {
    :Pat :canDo :D.
}

GRAPH _:bng_5 {
    _:bng_19 :findModel ((_:bng_20 _:bng_21) (_:bng_1 _:bng_2) (_:bng_1 _:bng_2)).
}

GRAPH _:bng_23 {
    _:bng_2 log:becomes true.
}

GRAPH _:bng_7 {
    _:bng_19 :findModel ((_:bng_20) (_:bng_1) (_:bng_1 _:bng_2)).
}

GRAPH _:bng_26 {
    _:bng_1 log:becomes true.
}

GRAPH _:bng_27 {
    _:bng_28 log:sequent (_:bng_2 _:bng_29).
}

GRAPH _:bng_11 {
    _:bng_19 :findModel ((_:bng_20 _:bng_21 _:bng_27) (_:bng_1 _:bng_3 _:bng_2) (_:bng_1 _:bng_3 _:bng_2)).
}

GRAPH _:bng_13 {
    _:bng_19 :findModel ((_:bng_20 _:bng_21) (_:bng_1 _:bng_3) (_:bng_1 _:bng_3 _:bng_2)).
}

GRAPH _:bng_30 {
    _:bng_3 log:becomes true.
}

GRAPH _:bng_15 {
    _:bng_19 :findModel ((_:bng_20) (_:bng_1) (_:bng_1 _:bng_3 _:bng_2)).
}
