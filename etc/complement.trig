# ----------------------------------------
# Negation as envisioned by Wouter Termont
# ----------------------------------------

@prefix log: <http://www.w3.org/2000/10/swap/log#>.
@prefix lingua: <http://www.w3.org/2000/10/swap/lingua#>.
@prefix var: <http://www.w3.org/2000/10/swap/var#>.
@prefix : <#>.

# Each predicate in RDF represents a binary relation, i.e. a set of 2-tuples.
# For each of those relations you can formulate exactly one complementary
# relation, which contains exactly the pairs of elements that are not in the
# original set (from this follows LEM). If we represent the relationship
# between these complements by a predicate, e.g. log:complement, then we
# can express the following in pure RDF
#
# NOT {
#    _:s1 :p1 _:o1.
#    _:s2 :p2 _:o2.
#    _:s3 :p3 _:o3.
# }
_:bng_1 lingua:implication _:bng_2.

_:bng_1 {
    _:s1 :p1 _:o1.
    _:s2 :p2 _:o2.
}

_:bng_2 {
    :c3 log:complement :p3.
    _:s3 :c3 _:o3.
}

_:bng_3 lingua:implication _:bng_4.

_:bng_3 {
    _:s2 :p2 _:o2.
    _:s3 :p3 _:o3.
}

_:bng_4 {
    :c1 log:complement :p1.
    _:s1 :c1 _:o1.
}

_:bng_5 lingua:implication _:bng_6.

_:bng_5 {
    _:s3 :p3 _:o3.
    _:s1 :p1 _:o1.
}

_:bng_6 {
    :c2 log:complement :p2.
    _:s2 :c2 _:o2.
}

# asserting the following should blow an inference fuse
# _:s1 :p1 _:o1.
# _:s2 :p2 _:o2.
# _:s3 :p3 _:o3.

# fuse
_:bng_7 lingua:implication false.

_:bng_7 {
    var:P log:complement var:C.
    var:S var:P var:O.
    var:S var:C var:O.
}

# query
_:bng_8 lingua:query _:bng_8.

_:bng_8 {
    _:bng_7 lingua:implication false.
}
