# --------------
# Turing Machine
# --------------
#
# Turing completeness test case.
# See http://en.wikipedia.org/wiki/Prolog#Turing_completeness

@prefix list: <http://www.w3.org/2000/10/swap/list#>.
@prefix lingua: <http://www.w3.org/2000/10/swap/lingua#>.
@prefix var: <http://www.w3.org/2000/10/swap/var#>.
@prefix : <#>.

# interpreter for Turing machine
_:ng1 lingua:hornb _:ng2.

_:ng1 {
    () :compute var:OutTape.
}

_:ng2 {
    var:Machine :start var:I.
    (var:I () "#" ()) :find var:OutTape.
}

_:ng3 lingua:hornb _:ng4.

_:ng3 {
    var:List :compute var:OutTape.
}

_:ng4 {
    var:List list:firstRest (var:Head var:Tail).
    var:Machine :start var:I.
    (var:I () var:Head var:Tail) :find var:OutTape.
}

_:ng5 lingua:hornb _:ng6.

_:ng5 {
    (var:State var:Left var:Cell var:Right) :find var:OutTape.
}

_:ng6 {
    (var:State var:Cell var:Write var:Move) :tape var:Next.
    (var:Move var:Left var:Write var:Right var:A var:B var:C) :move true.
    (var:Next var:A var:B var:C) :continue var:OutTape.
}

_:ng7 lingua:hornb _:ng8.

_:ng7 {
    (:halt var:Left var:Cell var:Right) :continue var:OutTape.
}

_:ng8 {
    var:Left :reverse var:R.
    var:List list:firstRest (var:Cell var:Right).
    (var:R var:List) list:append var:OutTape.
}

_:ng9 lingua:hornb _:ng10.

_:ng9 {
    (var:State var:Left var:Cell var:Right) :continue var:OutTape.
}

_:ng10 {
    (var:State var:Left var:Cell var:Right) :find var:OutTape.
}

_:ng11 lingua:hornb _:ng12.

_:ng11 {
    (:left () var:Cell var:Right () "#" var:L) :move true.
}

_:ng12 {
    var:L list:firstRest (var:Cell var:Right).
}

_:ng13 lingua:hornb _:ng14.

_:ng13 {
    (:left var:List var:Cell var:Right var:Tail var:Head var:L) :move true.
}

_:ng14 {
    var:List list:firstRest (var:Head var:Tail).
    var:L list:firstRest (var:Cell var:Right).
}

_:ng15 lingua:hornb true.

_:ng15 {
    (:stop var:Left var:Cell var:Right var:Left var:Cell var:Right) :move true.
}

_:ng16 lingua:hornb _:ng17.

_:ng16 {
    (:right var:Left var:Cell () var:L "#" ()) :move true.
}

_:ng17 {
    var:L list:firstRest (var:Cell var:Left).
}

_:ng18 lingua:hornb _:ng19.

_:ng18 {
    (:right var:Left var:Cell var:List var:L var:Head var:Tail) :move true.
}

_:ng19 {
    var:List list:firstRest (var:Head var:Tail).
    var:L list:firstRest (var:Cell var:Left).
}

_:ng20 lingua:hornb true.

_:ng20 {
    () :reverse ().
}

_:ng21 lingua:hornb _:ng22.

_:ng21 {
    var:List :reverse var:Reverse.
}

_:ng22 {
    var:List list:firstRest (var:Head var:Tail).
    var:Tail :reverse var:R.
    (var:R (var:Head)) list:append var:Reverse.
}

# a Turing machine to add 1 to a binary number
:add1 :start 0.

(0 0 0 :right) :tape 0.
(0 1 1 :right) :tape 0.
(0 "#" "#" :left) :tape 1.
(1 0 1 :stop) :tape :halt.
(1 1 0 :left) :tape 1.
(1 "#" 1 :stop) :tape :halt.

# query
_:ng23 lingua:query _:ng23.

_:ng23 {
    (1 0 1 0 0 1) :compute var:A1.
    (1 0 1 1 1 1) :compute var:A2.
    (1 1 1 1 1 1) :compute var:A3.
    () :compute var:A4.
}
