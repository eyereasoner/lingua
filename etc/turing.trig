# --------------
# Turing Machine
# --------------
#
# Turing completeness test case.
# See http://en.wikipedia.org/wiki/Prolog#Turing_completeness

PREFIX list: <http://www.w3.org/2000/10/swap/list#>
PREFIX lingua: <http://www.w3.org/2000/10/swap/lingua#>
PREFIX var: <http://www.w3.org/2000/10/swap/var#>
PREFIX : <#>

# interpreter for Turing machine
_:bng_1 lingua:backward _:bng_2.

GRAPH _:bng_1 {
    () :compute var:OutTape.
}

GRAPH _:bng_2 {
    var:Machine :start var:I.
    (var:I () "#" ()) :find var:OutTape.
}

_:bng_3 lingua:backward _:bng_4.

GRAPH _:bng_3 {
    var:List :compute var:OutTape.
}

GRAPH _:bng_4 {
    var:List list:firstRest (var:Head var:Tail).
    var:Machine :start var:I.
    (var:I () var:Head var:Tail) :find var:OutTape.
}

_:bng_5 lingua:backward _:bng_6.

GRAPH _:bng_5 {
    (var:State var:Left var:Cell var:Right) :find var:OutTape.
}

GRAPH _:bng_6 {
    (var:State var:Cell var:Write var:Move) :tape var:Next.
    (var:Move var:Left var:Write var:Right var:A var:B var:C) :move true.
    (var:Next var:A var:B var:C) :continue var:OutTape.
}

_:bng_7 lingua:backward _:bng_8.

GRAPH _:bng_7 {
    (:halt var:Left var:Cell var:Right) :continue var:OutTape.
}

GRAPH _:bng_8 {
    var:Left :reverse var:R.
    var:List list:firstRest (var:Cell var:Right).
    (var:R var:List) list:append var:OutTape.
}

_:bng_9 lingua:backward _:bng_10.

GRAPH _:bng_9 {
    (var:State var:Left var:Cell var:Right) :continue var:OutTape.
}

GRAPH _:bng_10 {
    (var:State var:Left var:Cell var:Right) :find var:OutTape.
}

_:bng_11 lingua:backward _:bng_12.

GRAPH _:bng_11 {
    (:left () var:Cell var:Right () "#" var:L) :move true.
}

GRAPH _:bng_12 {
    var:L list:firstRest (var:Cell var:Right).
}

_:bng_13 lingua:backward _:bng_14.

GRAPH _:bng_13 {
    (:left var:List var:Cell var:Right var:Tail var:Head var:L) :move true.
}

GRAPH _:bng_14 {
    var:List list:firstRest (var:Head var:Tail).
    var:L list:firstRest (var:Cell var:Right).
}

_:bng_15 lingua:backward true.

GRAPH _:bng_15 {
    (:stop var:Left var:Cell var:Right var:Left var:Cell var:Right) :move true.
}

_:bng_16 lingua:backward _:bng_17.

GRAPH _:bng_16 {
    (:right var:Left var:Cell () var:L "#" ()) :move true.
}

GRAPH _:bng_17 {
    var:L list:firstRest (var:Cell var:Left).
}

_:bng_18 lingua:backward _:bng_19.

GRAPH _:bng_18 {
    (:right var:Left var:Cell var:List var:L var:Head var:Tail) :move true.
}

GRAPH _:bng_19 {
    var:List list:firstRest (var:Head var:Tail).
    var:L list:firstRest (var:Cell var:Left).
}

_:bng_20 lingua:backward true.

GRAPH _:bng_20 {
    () :reverse ().
}

_:bng_21 lingua:backward _:bng_22.

GRAPH _:bng_21 {
    var:List :reverse var:Reverse.
}

GRAPH _:bng_22 {
    var:List list:firstRest (var:Head var:Tail).
    var:Tail :reverse var:R.
    (var:R (var:Head)) list:append var:Reverse.
}

# a Turing machine to add 1 to a binary number
:add1 :start 0.

(0 0 0 :right) :tape 0.
(0 1 1 :right) :tape 0.
(0 "#" "#" :left) :tape 1.
(1 0 1 :stop) :tape :halt.
(1 1 0 :left) :tape 1.
(1 "#" 1 :stop) :tape :halt.

# query
_:bng_23 lingua:answer _:bng_23.

GRAPH _:bng_23 {
    (1 0 1 0 0 1) :compute var:A1.
    (1 0 1 1 1 1) :compute var:A2.
    (1 1 1 1 1 1) :compute var:A3.
    () :compute var:A4.
}
