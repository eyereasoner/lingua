# ----------------------------
# Policy model finding example
# ----------------------------
#
# Inspired by gps.trig

PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX list: <http://www.w3.org/2000/10/swap/list#>
PREFIX log: <http://www.w3.org/2000/10/swap/log#>
PREFIX vcard: <http://www.w3.org/2006/vcard/ns#>
PREFIX lingua: <http://www.w3.org/2000/10/swap/lingua#>
PREFIX var: <http://www.w3.org/2000/10/swap/var#>
PREFIX : <#>

# Pat is an individual
:Pat a vcard:Individual.

# if X is an individual then X can do A or B
_:bng_1 log:sequent (_:bng_2 _:bng_3).

GRAPH _:bng_1 {
    var:X a vcard:Individual.
}

GRAPH _:bng_2 {
    var:X :canDo :A.
}

GRAPH _:bng_3 {
    var:X :canDo :B.
}

# if X is an individual who can do A then X can do E or D
_:bng_4 log:sequent (_:bng_5 _:bng_6).

GRAPH _:bng_4 {
    var:X a vcard:Individual.
    var:X :canDo :A.
}

GRAPH _:bng_5 {
    var:X :canDo :E.
}

GRAPH _:bng_6 {
    var:X :canDo :D.
}

# if X is an individual who can do D then X can do E or F
_:bng_7 log:sequent (_:bng_8 _:bng_9).

GRAPH _:bng_7 {
    var:X a vcard:Individual.
    var:X :canDo :D.
}

GRAPH _:bng_8 {
    var:X :canDo :E.
}

GRAPH _:bng_9 {
    var:X :canDo :F.
}

# find model reaching goal
_:bng_10 lingua:backward _:bng_11.

GRAPH _:bng_10 {
    var:Goal :findModel (var:Steps var:Model var:Model).
}

GRAPH _:bng_11 {
    var:Goal log:call true.
    [] rdf:value true; log:callWithCut true.
}

_:bng_12 lingua:backward _:bng_13.

GRAPH _:bng_12 {
    var:Goal :findModel (var:Steps1 var:Model1 var:Model).
}

GRAPH _:bng_13 {
    var:Prem log:sequent var:Cases.
    var:Cases list:member var:Case.
    var:Prem log:call true.
    var:Steps1 list:notMember _:bng_14.
    (var:Steps1 (_:bng_14)) list:append var:Steps2.
    (var:Model1 (var:Case)) list:append var:Model2.
    [] rdf:value true; log:becomes var:Case.
    _:bng_15 log:callWithCleanup _:bng_16.
}

GRAPH _:bng_14 {
    var:Prem log:sequent var:Cases.
}

GRAPH _:bng_15 {
    var:Goal :findModel (var:Steps2 var:Model2 var:Model).
}

GRAPH _:bng_16 {
    var:Case log:becomes true.
}

# query: find model where X is an individual who can do E
_:bng_17 lingua:answer _:bng_18.

GRAPH _:bng_17 {
    _:bng_19 :findModel (() () var:Model).
}

GRAPH _:bng_18 {
    :model :is var:Model.
}

GRAPH _:bng_19 {
    var:X a vcard:Individual.
    var:X :canDo :E.
}
